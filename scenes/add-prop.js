////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// MODULE PREREQUISITS //////////////////////////////////////////////////////////////////////////////

const { messages	  	  }	= require('../speech');
const { SOURCE_ID		  } = require('../constants');
const 	name 				= module.filename.match(/\b([a-z0-9_-]+)\.js$/i)[1];
const   trace      			= require('../../../tracer').create({ title: `[SCENE ${name}]`, source: SOURCE_ID });
const 	Scene 				= require('telegraf/scenes/base');
const	scene_add_prop	 	= new Scene(name);





/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////// Сцена сбора данных по парковкам и кладовкам

scene_add_prop.enter(ctx => {

	let names = {

		apt: 'квартиры',
		parking: 'кладовки',
		storage: 'парковки'
	}

	return ctx.reply(`Напишите, пожалуйста, номер вашей ${names[ctx.session.prop.type]}:`);
});

scene_add_prop.on('message', (ctx, next) => {

	let data = ctx.session.prop;
	if (!data) return ctx.scene.leave();

	let text = ctx.update.message.text;
	return ctx.db.insert("prop", {

		user: ctx.user._rid,
		user_id: ctx.user.id,
		type: data.type,
		answer: text
	})
	.then(() => ctx.reply(`Принято: ${text}`))
	.catch(trace.info)
	.then(() => ctx.scene.leave());
});





////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// MODULE EXPORTS ///////////////////////////////////////////////////////////////////////////////////

module.exports = scene_add_prop